name: Regression Tests

on:
  issue_comment:
    types: [created]

jobs:
  regression-test:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/regression')
    runs-on: ubuntu-latest

    steps:
      - name: Check if comment author has write access
        uses: actions/github-script@v7
        with:
          script: |
            const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.comment.user.login
            });

            const hasWriteAccess = ['admin', 'write'].includes(collaborator.permission);

            if (!hasWriteAccess) {
              core.setFailed('Only collaborators with write access can trigger regression tests');
            }

      - name: React to comment with thumbs up
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '+1'
            });

      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            core.setOutput('sha', pullRequest.head.sha);
            core.setOutput('ref', pullRequest.head.ref);
            core.setOutput('repo', pullRequest.head.repo.full_name);

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr.outputs.repo }}
          ref: ${{ steps.pr.outputs.sha }}

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend: 'judge-backend/**'
            webapp: 'judge-webapp/**'
            cli: 'judge-cli/**'
            autoscaler: 'judge-autoscaler/**'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker layer caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: regression/package.json

      - name: Set up Python for CLI
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
          cache-dependency-path: judge-cli/requirements.dev.txt

      - name: Install CLI dependencies
        run: |
          cd judge-cli
          pip install -r requirements.dev.txt

      - name: Install regression test dependencies
        run: |
          cd regression
          npm ci

      - name: Build test environment
        run: |
          # Use Docker Buildx with caching for better performance
          if [ "${{ steps.changes.outputs.backend }}" == "true" ]; then
            docker buildx build --load --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t judge-api:latest -f judge-backend/api.Dockerfile judge-backend &
            docker buildx build --load --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t judge-autojudge:latest -f judge-backend/autojudge.Dockerfile judge-backend &
          else
            echo "Skipping backend builds - no changes detected"
          fi

          if [ "${{ steps.changes.outputs.webapp }}" == "true" ]; then
            docker buildx build --load --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t judge-webapp:latest judge-webapp &
          else
            echo "Skipping webapp build - no changes detected"
          fi

          if [ "${{ steps.changes.outputs.autoscaler }}" == "true" ]; then
            docker buildx build --load --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t judge-autoscaler:latest judge-autoscaler &
          else
            echo "Skipping autoscaler build - no changes detected"
          fi

          # Always build CLI
          echo "Building CLI"
          (cd judge-cli && make build) &

          # Wait for all background jobs to complete
          wait

          # Move cache to avoid growing cache size
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

          # Copy CLI binary to test directory
          mkdir -p docker/test
          cp judge-cli/dist/judge docker/test/judge

      - name: Run regression tests
        run: |
          cd regression
          npm run test

      - name: Comment on PR with results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const jobStatus = '${{ job.status }}';
            const commentBody = jobStatus === 'success' 
              ? '✅ Regression tests passed!'
              : '❌ Regression tests failed. Please check the workflow logs for details.';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
