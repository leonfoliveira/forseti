name: Regression Tests

on:
  issue_comment:
    types: [created]

jobs:
  regression-test:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/regression')
    runs-on: ubuntu-latest

    steps:
      - name: Check if comment author has write access
        uses: actions/github-script@v7
        with:
          script: |
            const { data: collaborator } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.payload.comment.user.login
            });

            const hasWriteAccess = ['admin', 'write'].includes(collaborator.permission);

            if (!hasWriteAccess) {
              core.setFailed('Only collaborators with write access can trigger regression tests');
            }

      - name: React to comment with thumbs up
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: '+1'
            });

      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            core.setOutput('sha', pullRequest.head.sha);
            core.setOutput('ref', pullRequest.head.ref);
            core.setOutput('repo', pullRequest.head.repo.full_name);

      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.pr.outputs.repo }}
          ref: ${{ steps.pr.outputs.sha }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Docker layer caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Python for CLI
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: judge-cli/requirements.dev.txt

      - name: Install CLI dependencies
        run: |
          cd judge-cli
          pip install -r requirements.dev.txt

      - name: Build test environment
        run: |
          docker compose build -f docker/development/docker-compose.yaml --progress=plain --pull \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max &
          (cd judge-cli && make build) &

          wait

          # Consolidate all cache layers
          mkdir -p /tmp/.buildx-cache-consolidated

          # Copy existing cache if it exists
          if [ -d "/tmp/.buildx-cache" ]; then
            cp -r /tmp/.buildx-cache/* /tmp/.buildx-cache-consolidated/ 2>/dev/null || true
          fi

          # Merge new cache layers
          for cache_dir in /tmp/.buildx-cache-new; do
            if [ -d "$cache_dir" ]; then
              cp -r "$cache_dir"/* /tmp/.buildx-cache-consolidated/ 2>/dev/null || true
              rm -rf "$cache_dir"
            fi
          done

          # Replace old cache with consolidated one
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-consolidated /tmp/.buildx-cache

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: regression/package.json

      - name: Install regression test dependencies
        run: |
          cd regression
          npm ci

      - name: Install Playwright browsers
        run: |
          cd regression
          npx playwright install --with-deps

      - name: Run regression tests
        run: |
          cd regression
          npm run test

      - name: Comment on PR with results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const jobStatus = '${{ job.status }}';
            const commentBody = jobStatus === 'success' 
              ? '✅ Regression tests passed!'
              : '❌ Regression tests failed. Please check the workflow logs for details.';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
