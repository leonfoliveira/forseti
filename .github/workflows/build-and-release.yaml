name: Build and Release

on:
  release:
    types: [created]

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: deployment/production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker layer caching
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-release-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-release-

      - name: Get tag name
        id: vars
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set version environment variable
        run: echo "VERSION=${{ steps.vars.outputs.tag }}" >> $GITHUB_ENV

      - name: Set up stack version
        run: sed -i "s/\${VERSION:-latest}/$VERSION/" stack.yaml

      - name: Build images
        run: |
          # Build all images in parallel with enhanced caching
          docker buildx build --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t applications-api:${{ steps.vars.outputs.tag }} -f ../../applications/backend/api.Dockerfile ../../applications/backend --load &
          docker buildx build --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t applications-autojudge:${{ steps.vars.outputs.tag }} -f ../../applications/backend/autojudge.Dockerfile ../../applications/backend --load &
          docker buildx build --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t applications-webapp:${{ steps.vars.outputs.tag }} ../../applications/webapp --load &
          docker buildx build --cache-from type=local,src=/tmp/.buildx-cache --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max -t applications-autoscaler:${{ steps.vars.outputs.tag }} ../../applications/autoscaler --load &

          # Wait for all builds to complete
          wait

          # Update cache
          if [ -d "/tmp/.buildx-cache-new" ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

      - name: Tag images
        run: |
          docker tag applications-api:${{ steps.vars.outputs.tag }} leonfoliveira/applications-api:${{ steps.vars.outputs.tag }}
          docker tag applications-autojudge:${{ steps.vars.outputs.tag }} leonfoliveira/applications-autojudge:${{ steps.vars.outputs.tag }}
          docker tag applications-webapp:${{ steps.vars.outputs.tag }} leonfoliveira/applications-webapp:${{ steps.vars.outputs.tag }}
          docker tag applications-autoscaler:${{ steps.vars.outputs.tag }} leonfoliveira/applications-autoscaler:${{ steps.vars.outputs.tag }}
          docker tag applications-api:${{ steps.vars.outputs.tag }} leonfoliveira/applications-api:latest
          docker tag applications-autojudge:${{ steps.vars.outputs.tag }} leonfoliveira/applications-autojudge:latest
          docker tag applications-webapp:${{ steps.vars.outputs.tag }} leonfoliveira/applications-webapp:latest
          docker tag applications-autoscaler:${{ steps.vars.outputs.tag }} leonfoliveira/applications-autoscaler:latest

      - name: Push images to Docker Hub
        env:
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        run: |
          echo $DOCKER_HUB_ACCESS_TOKEN | docker login -u leonfoliveira --password-stdin
          docker push leonfoliveira/applications-api:${{ steps.vars.outputs.tag }}
          docker push leonfoliveira/applications-autojudge:${{ steps.vars.outputs.tag }}
          docker push leonfoliveira/applications-webapp:${{ steps.vars.outputs.tag }}
          docker push leonfoliveira/applications-autoscaler:${{ steps.vars.outputs.tag }}
          docker push leonfoliveira/applications-api:latest
          docker push leonfoliveira/applications-autojudge:latest
          docker push leonfoliveira/applications-webapp:latest
          docker push leonfoliveira/applications-autoscaler:latest

      - name: Set up Python for CLI build
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: cli/requirements.dev.txt

      - name: Install CLI build dependencies
        run: pip install -r ../../applications/cli/requirements.dev.txt

      - name: Build cli
        run: cd ../../applications/cli && make build VERSION=${{ steps.vars.outputs.tag }}

      - name: Copy migrations to production directory
        run: |
          mkdir -p volumes/migrations
          cp -r ../../applications/backend/common/src/main/resources/migration/* volumes/migrations/

      - name: Copy sandboxes to production directory
        run: |
          mkdir -p sandboxes
          cp -r ../../applications/backend/autojudge/src/main/resources/sandboxes/* sandboxes/

      - name: Copy additional files to production directory
        run: |
          cp ../../README.md .
          cp ../../LICENSE .
          cp ../../applications/cli/dist/judge .

      - name: Create ZIP file with tag name
        run: zip -r applications-${{ steps.vars.outputs.tag }}.zip *

      - name: Upload ZIP to release
        uses: softprops/action-gh-release@v1
        with:
          files: deployment/production/applications-${{ steps.vars.outputs.tag }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-deploy-docs:
    needs: build-and-release
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Get tag name
        id: vars
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Install MkDocs and dependencies
        run: pip install mkdocs mkdocs-material

      - name: Build MkDocs site
        run: VERSION=${{ steps.vars.outputs.tag }} mkdocs build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
