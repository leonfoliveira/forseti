import React, { createContext, useContext, useState } from "react";
import { AlertBox } from "@/app/_component/notification/alert-box";
import { ToastBox } from "@/app/_component/notification/toast-box";
import { Message } from "@/i18n/message";

export enum NotificationLevel {
  INFO = "INFO",
  SUCCESS = "SUCCESS",
  WARNING = "WARNING",
  ERROR = "ERROR",
}

export enum NotificationType {
  ALERT = "alert",
  TOAST = "toast",
}

export type NotificationItemType = {
  id: string;
  type: NotificationType;
  level: NotificationLevel;
  text: Message;
  ttl: number;
};

type ShowType = (text: Message, ttl?: number) => void;
type NotificationGroupType = {
  items: NotificationItemType[];
  info: ShowType;
  success: ShowType;
  warning: ShowType;
  error: ShowType;
  close: (id: string) => void;
};

const NotificationContext = createContext<
  Record<NotificationType, NotificationGroupType>
>({
  alert: {} as NotificationGroupType,
  toast: {} as NotificationGroupType,
});

export function NotificationProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const [notifications, setNotifications] = useState<NotificationItemType[]>(
    []
  );

  /**
   * Show a notification of a specific type with the given text, level, and time-to-live (ttl) in milliseconds.
   */
  function show(
    type: NotificationType,
    text: Message,
    level: NotificationLevel = NotificationLevel.INFO
  ) {
    const notification = {
      id: crypto.randomUUID(),
      type,
      text,
      level,
      ttl: 2000 + text.defaultMessage.length * 50,
    };
    setNotifications((prev) => [...prev, notification]);
  }

  /**
   * Close a notification by its autogenerated id.
   */
  function close(id: string) {
    setNotifications((prev) => prev.filter((n) => n.id !== id));
  }

  /**
   * Generate filtered notification list and show-methods for each notification type.
   */
  const value = {} as Record<NotificationType, NotificationGroupType>;
  Object.values(NotificationType).forEach((type) => {
    value[type] = {
      items: notifications.filter((n) => n.type === type),
      info: (text) => show(type, text, NotificationLevel.INFO),
      success: (text) => show(type, text, NotificationLevel.SUCCESS),
      warning: (text) => show(type, text, NotificationLevel.WARNING),
      error: (text) => show(type, text, NotificationLevel.ERROR),
      close: close,
    };
  });

  return (
    <NotificationContext.Provider value={value}>
      {children}
      <AlertBox items={value.alert.items} onClose={close} />
      <ToastBox items={value.toast.items} onClose={close} />
    </NotificationContext.Provider>
  );
}

export const useAlert = () => useContext(NotificationContext).alert;
export const useToast = () => useContext(NotificationContext).toast;
