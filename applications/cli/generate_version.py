#!/usr/bin/env python3
"""
Script to generate version information for the CLI application.
This script is called during the build process to inject version data.
"""

import argparse
import datetime
import subprocess
import sys
from pathlib import Path


def get_git_version():
    """Get version from Git tags and commit hash."""
    try:
        # Try to get the latest tag
        result = subprocess.run(
            ["git", "describe", "--tags", "--exact-match"],
            capture_output=True,
            text=True,
            check=False
        )

        if result.returncode == 0:
            # We're on a tagged commit
            version = result.stdout.strip()
        else:
            # Get the latest tag and add commit info
            try:
                latest_tag = subprocess.run(
                    ["git", "describe", "--tags", "--abbrev=0"],
                    capture_output=True,
                    text=True,
                    check=True
                ).stdout.strip()

                # Get commits since the tag
                commits_since = subprocess.run(
                    ["git", "rev-list", f"{latest_tag}..HEAD", "--count"],
                    capture_output=True,
                    text=True,
                    check=True
                ).stdout.strip()

                # Get short commit hash
                commit_hash = subprocess.run(
                    ["git", "rev-parse", "--short", "HEAD"],
                    capture_output=True,
                    text=True,
                    check=True
                ).stdout.strip()

                if int(commits_since) > 0:
                    version = f"{latest_tag}-{commits_since}-g{commit_hash}"
                else:
                    version = latest_tag

            except subprocess.CalledProcessError:
                # No tags exist, use commit hash
                try:
                    commit_hash = subprocess.run(
                        ["git", "rev-parse", "--short", "HEAD"],
                        capture_output=True,
                        text=True,
                        check=True
                    ).stdout.strip()
                    version = f"0.0.0-g{commit_hash}"
                except subprocess.CalledProcessError:
                    version = "0.0.0-unknown"

    except Exception:
        version = "0.0.0-unknown"

    return version


def get_git_commit():
    """Get the full Git commit hash."""
    try:
        result = subprocess.run(
            ["git", "rev-parse", "HEAD"],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError:
        return "unknown"


def generate_version_file(version_file_path, version=None):
    """Generate the version file with build-time information."""
    if version is None:
        version = get_git_version()

    git_commit = get_git_commit()
    build_date = datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S UTC")

    version_content = f'''# This file is automatically generated during build
# Do not edit manually

__version__ = "{version}"
__git_commit__ = "{git_commit}"
__build_date__ = "{build_date}"
'''

    version_file_path.write_text(version_content)
    print(f"Generated version file: {version_file_path}")
    print(f"Version: {version}")
    print(f"Git commit: {git_commit}")
    print(f"Build date: {build_date}")


def main():
    parser = argparse.ArgumentParser(
        description="Generate version information")
    parser.add_argument(
        "--output",
        type=Path,
        default=Path(__file__).parent / "cli" / "_version.py",
        help="Output path for version file"
    )
    parser.add_argument(
        "--version",
        help="Override version string"
    )

    args = parser.parse_args()

    generate_version_file(args.output, args.version)


if __name__ == "__main__":
    main()
